                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Pattern
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _button
                                     13 	.globl _delay
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _patternPtr
                                    111 	.globl _RamPattern
                                    112 	.globl _Pattern6
                                    113 	.globl _Pattern5
                                    114 	.globl _Pattern4
                                    115 	.globl _Pattern3
                                    116 	.globl _Pattern2
                                    117 	.globl _Pattern1
                                    118 ;--------------------------------------------------------
                                    119 ; special function registers
                                    120 ;--------------------------------------------------------
                                    121 	.area RSEG    (ABS,DATA)
      000000                        122 	.org 0x0000
                           000080   123 G$P0$0_0$0 == 0x0080
                           000080   124 _P0	=	0x0080
                           000081   125 G$SP$0_0$0 == 0x0081
                           000081   126 _SP	=	0x0081
                           000082   127 G$DPL$0_0$0 == 0x0082
                           000082   128 _DPL	=	0x0082
                           000083   129 G$DPH$0_0$0 == 0x0083
                           000083   130 _DPH	=	0x0083
                           000087   131 G$PCON$0_0$0 == 0x0087
                           000087   132 _PCON	=	0x0087
                           000088   133 G$TCON$0_0$0 == 0x0088
                           000088   134 _TCON	=	0x0088
                           000089   135 G$TMOD$0_0$0 == 0x0089
                           000089   136 _TMOD	=	0x0089
                           00008A   137 G$TL0$0_0$0 == 0x008a
                           00008A   138 _TL0	=	0x008a
                           00008B   139 G$TL1$0_0$0 == 0x008b
                           00008B   140 _TL1	=	0x008b
                           00008C   141 G$TH0$0_0$0 == 0x008c
                           00008C   142 _TH0	=	0x008c
                           00008D   143 G$TH1$0_0$0 == 0x008d
                           00008D   144 _TH1	=	0x008d
                           000090   145 G$P1$0_0$0 == 0x0090
                           000090   146 _P1	=	0x0090
                           000098   147 G$SCON$0_0$0 == 0x0098
                           000098   148 _SCON	=	0x0098
                           000099   149 G$SBUF$0_0$0 == 0x0099
                           000099   150 _SBUF	=	0x0099
                           0000A0   151 G$P2$0_0$0 == 0x00a0
                           0000A0   152 _P2	=	0x00a0
                           0000A8   153 G$IE$0_0$0 == 0x00a8
                           0000A8   154 _IE	=	0x00a8
                           0000B0   155 G$P3$0_0$0 == 0x00b0
                           0000B0   156 _P3	=	0x00b0
                           0000B8   157 G$IP$0_0$0 == 0x00b8
                           0000B8   158 _IP	=	0x00b8
                           0000D0   159 G$PSW$0_0$0 == 0x00d0
                           0000D0   160 _PSW	=	0x00d0
                           0000E0   161 G$ACC$0_0$0 == 0x00e0
                           0000E0   162 _ACC	=	0x00e0
                           0000F0   163 G$B$0_0$0 == 0x00f0
                           0000F0   164 _B	=	0x00f0
                                    165 ;--------------------------------------------------------
                                    166 ; special function bits
                                    167 ;--------------------------------------------------------
                                    168 	.area RSEG    (ABS,DATA)
      000000                        169 	.org 0x0000
                           000080   170 G$P0_0$0_0$0 == 0x0080
                           000080   171 _P0_0	=	0x0080
                           000081   172 G$P0_1$0_0$0 == 0x0081
                           000081   173 _P0_1	=	0x0081
                           000082   174 G$P0_2$0_0$0 == 0x0082
                           000082   175 _P0_2	=	0x0082
                           000083   176 G$P0_3$0_0$0 == 0x0083
                           000083   177 _P0_3	=	0x0083
                           000084   178 G$P0_4$0_0$0 == 0x0084
                           000084   179 _P0_4	=	0x0084
                           000085   180 G$P0_5$0_0$0 == 0x0085
                           000085   181 _P0_5	=	0x0085
                           000086   182 G$P0_6$0_0$0 == 0x0086
                           000086   183 _P0_6	=	0x0086
                           000087   184 G$P0_7$0_0$0 == 0x0087
                           000087   185 _P0_7	=	0x0087
                           000088   186 G$IT0$0_0$0 == 0x0088
                           000088   187 _IT0	=	0x0088
                           000089   188 G$IE0$0_0$0 == 0x0089
                           000089   189 _IE0	=	0x0089
                           00008A   190 G$IT1$0_0$0 == 0x008a
                           00008A   191 _IT1	=	0x008a
                           00008B   192 G$IE1$0_0$0 == 0x008b
                           00008B   193 _IE1	=	0x008b
                           00008C   194 G$TR0$0_0$0 == 0x008c
                           00008C   195 _TR0	=	0x008c
                           00008D   196 G$TF0$0_0$0 == 0x008d
                           00008D   197 _TF0	=	0x008d
                           00008E   198 G$TR1$0_0$0 == 0x008e
                           00008E   199 _TR1	=	0x008e
                           00008F   200 G$TF1$0_0$0 == 0x008f
                           00008F   201 _TF1	=	0x008f
                           000090   202 G$P1_0$0_0$0 == 0x0090
                           000090   203 _P1_0	=	0x0090
                           000091   204 G$P1_1$0_0$0 == 0x0091
                           000091   205 _P1_1	=	0x0091
                           000092   206 G$P1_2$0_0$0 == 0x0092
                           000092   207 _P1_2	=	0x0092
                           000093   208 G$P1_3$0_0$0 == 0x0093
                           000093   209 _P1_3	=	0x0093
                           000094   210 G$P1_4$0_0$0 == 0x0094
                           000094   211 _P1_4	=	0x0094
                           000095   212 G$P1_5$0_0$0 == 0x0095
                           000095   213 _P1_5	=	0x0095
                           000096   214 G$P1_6$0_0$0 == 0x0096
                           000096   215 _P1_6	=	0x0096
                           000097   216 G$P1_7$0_0$0 == 0x0097
                           000097   217 _P1_7	=	0x0097
                           000098   218 G$RI$0_0$0 == 0x0098
                           000098   219 _RI	=	0x0098
                           000099   220 G$TI$0_0$0 == 0x0099
                           000099   221 _TI	=	0x0099
                           00009A   222 G$RB8$0_0$0 == 0x009a
                           00009A   223 _RB8	=	0x009a
                           00009B   224 G$TB8$0_0$0 == 0x009b
                           00009B   225 _TB8	=	0x009b
                           00009C   226 G$REN$0_0$0 == 0x009c
                           00009C   227 _REN	=	0x009c
                           00009D   228 G$SM2$0_0$0 == 0x009d
                           00009D   229 _SM2	=	0x009d
                           00009E   230 G$SM1$0_0$0 == 0x009e
                           00009E   231 _SM1	=	0x009e
                           00009F   232 G$SM0$0_0$0 == 0x009f
                           00009F   233 _SM0	=	0x009f
                           0000A0   234 G$P2_0$0_0$0 == 0x00a0
                           0000A0   235 _P2_0	=	0x00a0
                           0000A1   236 G$P2_1$0_0$0 == 0x00a1
                           0000A1   237 _P2_1	=	0x00a1
                           0000A2   238 G$P2_2$0_0$0 == 0x00a2
                           0000A2   239 _P2_2	=	0x00a2
                           0000A3   240 G$P2_3$0_0$0 == 0x00a3
                           0000A3   241 _P2_3	=	0x00a3
                           0000A4   242 G$P2_4$0_0$0 == 0x00a4
                           0000A4   243 _P2_4	=	0x00a4
                           0000A5   244 G$P2_5$0_0$0 == 0x00a5
                           0000A5   245 _P2_5	=	0x00a5
                           0000A6   246 G$P2_6$0_0$0 == 0x00a6
                           0000A6   247 _P2_6	=	0x00a6
                           0000A7   248 G$P2_7$0_0$0 == 0x00a7
                           0000A7   249 _P2_7	=	0x00a7
                           0000A8   250 G$EX0$0_0$0 == 0x00a8
                           0000A8   251 _EX0	=	0x00a8
                           0000A9   252 G$ET0$0_0$0 == 0x00a9
                           0000A9   253 _ET0	=	0x00a9
                           0000AA   254 G$EX1$0_0$0 == 0x00aa
                           0000AA   255 _EX1	=	0x00aa
                           0000AB   256 G$ET1$0_0$0 == 0x00ab
                           0000AB   257 _ET1	=	0x00ab
                           0000AC   258 G$ES$0_0$0 == 0x00ac
                           0000AC   259 _ES	=	0x00ac
                           0000AF   260 G$EA$0_0$0 == 0x00af
                           0000AF   261 _EA	=	0x00af
                           0000B0   262 G$P3_0$0_0$0 == 0x00b0
                           0000B0   263 _P3_0	=	0x00b0
                           0000B1   264 G$P3_1$0_0$0 == 0x00b1
                           0000B1   265 _P3_1	=	0x00b1
                           0000B2   266 G$P3_2$0_0$0 == 0x00b2
                           0000B2   267 _P3_2	=	0x00b2
                           0000B3   268 G$P3_3$0_0$0 == 0x00b3
                           0000B3   269 _P3_3	=	0x00b3
                           0000B4   270 G$P3_4$0_0$0 == 0x00b4
                           0000B4   271 _P3_4	=	0x00b4
                           0000B5   272 G$P3_5$0_0$0 == 0x00b5
                           0000B5   273 _P3_5	=	0x00b5
                           0000B6   274 G$P3_6$0_0$0 == 0x00b6
                           0000B6   275 _P3_6	=	0x00b6
                           0000B7   276 G$P3_7$0_0$0 == 0x00b7
                           0000B7   277 _P3_7	=	0x00b7
                           0000B0   278 G$RXD$0_0$0 == 0x00b0
                           0000B0   279 _RXD	=	0x00b0
                           0000B1   280 G$TXD$0_0$0 == 0x00b1
                           0000B1   281 _TXD	=	0x00b1
                           0000B2   282 G$INT0$0_0$0 == 0x00b2
                           0000B2   283 _INT0	=	0x00b2
                           0000B3   284 G$INT1$0_0$0 == 0x00b3
                           0000B3   285 _INT1	=	0x00b3
                           0000B4   286 G$T0$0_0$0 == 0x00b4
                           0000B4   287 _T0	=	0x00b4
                           0000B5   288 G$T1$0_0$0 == 0x00b5
                           0000B5   289 _T1	=	0x00b5
                           0000B6   290 G$WR$0_0$0 == 0x00b6
                           0000B6   291 _WR	=	0x00b6
                           0000B7   292 G$RD$0_0$0 == 0x00b7
                           0000B7   293 _RD	=	0x00b7
                           0000B8   294 G$PX0$0_0$0 == 0x00b8
                           0000B8   295 _PX0	=	0x00b8
                           0000B9   296 G$PT0$0_0$0 == 0x00b9
                           0000B9   297 _PT0	=	0x00b9
                           0000BA   298 G$PX1$0_0$0 == 0x00ba
                           0000BA   299 _PX1	=	0x00ba
                           0000BB   300 G$PT1$0_0$0 == 0x00bb
                           0000BB   301 _PT1	=	0x00bb
                           0000BC   302 G$PS$0_0$0 == 0x00bc
                           0000BC   303 _PS	=	0x00bc
                           0000D0   304 G$P$0_0$0 == 0x00d0
                           0000D0   305 _P	=	0x00d0
                           0000D1   306 G$F1$0_0$0 == 0x00d1
                           0000D1   307 _F1	=	0x00d1
                           0000D2   308 G$OV$0_0$0 == 0x00d2
                           0000D2   309 _OV	=	0x00d2
                           0000D3   310 G$RS0$0_0$0 == 0x00d3
                           0000D3   311 _RS0	=	0x00d3
                           0000D4   312 G$RS1$0_0$0 == 0x00d4
                           0000D4   313 _RS1	=	0x00d4
                           0000D5   314 G$F0$0_0$0 == 0x00d5
                           0000D5   315 _F0	=	0x00d5
                           0000D6   316 G$AC$0_0$0 == 0x00d6
                           0000D6   317 _AC	=	0x00d6
                           0000D7   318 G$CY$0_0$0 == 0x00d7
                           0000D7   319 _CY	=	0x00d7
                                    320 ;--------------------------------------------------------
                                    321 ; overlayable register banks
                                    322 ;--------------------------------------------------------
                                    323 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        324 	.ds 8
                                    325 ;--------------------------------------------------------
                                    326 ; internal ram data
                                    327 ;--------------------------------------------------------
                                    328 	.area DSEG    (DATA)
                           000000   329 G$Pattern1$0_0$0==.
      000008                        330 _Pattern1::
      000008                        331 	.ds 8
                           000008   332 G$Pattern2$0_0$0==.
      000010                        333 _Pattern2::
      000010                        334 	.ds 8
                           000010   335 G$Pattern3$0_0$0==.
      000018                        336 _Pattern3::
      000018                        337 	.ds 8
                           000018   338 G$Pattern4$0_0$0==.
      000020                        339 _Pattern4::
      000020                        340 	.ds 8
                           000020   341 G$Pattern5$0_0$0==.
      000028                        342 _Pattern5::
      000028                        343 	.ds 8
                           000028   344 G$Pattern6$0_0$0==.
      000030                        345 _Pattern6::
      000030                        346 	.ds 8
                           000030   347 G$RamPattern$0_0$0==.
      000038                        348 _RamPattern::
      000038                        349 	.ds 8
                           000038   350 G$patternPtr$0_0$0==.
      000040                        351 _patternPtr::
      000040                        352 	.ds 3
                           000050   353 FPattern$mode$0_0$0 == 0x0050
                           000050   354 _mode	=	0x0050
                           000051   355 FPattern$modePtr$0_0$0 == 0x0051
                           000051   356 _modePtr	=	0x0051
                           000052   357 FPattern$x$0_0$0 == 0x0052
                           000052   358 _x	=	0x0052
                           000053   359 FPattern$RamPatternPtr$0_0$0 == 0x0053
                           000053   360 _RamPatternPtr	=	0x0053
                                    361 ;--------------------------------------------------------
                                    362 ; overlayable items in internal ram
                                    363 ;--------------------------------------------------------
                                    364 ;--------------------------------------------------------
                                    365 ; Stack segment in internal ram
                                    366 ;--------------------------------------------------------
                                    367 	.area	SSEG
      000043                        368 __start__stack:
      000043                        369 	.ds	1
                                    370 
                                    371 ;--------------------------------------------------------
                                    372 ; indirectly addressable internal ram data
                                    373 ;--------------------------------------------------------
                                    374 	.area ISEG    (DATA)
                                    375 ;--------------------------------------------------------
                                    376 ; absolute internal ram data
                                    377 ;--------------------------------------------------------
                                    378 	.area IABS    (ABS,DATA)
                                    379 	.area IABS    (ABS,DATA)
                                    380 ;--------------------------------------------------------
                                    381 ; bit data
                                    382 ;--------------------------------------------------------
                                    383 	.area BSEG    (BIT)
                                    384 ;--------------------------------------------------------
                                    385 ; paged external ram data
                                    386 ;--------------------------------------------------------
                                    387 	.area PSEG    (PAG,XDATA)
                                    388 ;--------------------------------------------------------
                                    389 ; external ram data
                                    390 ;--------------------------------------------------------
                                    391 	.area XSEG    (XDATA)
                                    392 ;--------------------------------------------------------
                                    393 ; absolute external ram data
                                    394 ;--------------------------------------------------------
                                    395 	.area XABS    (ABS,XDATA)
                                    396 ;--------------------------------------------------------
                                    397 ; external initialized ram data
                                    398 ;--------------------------------------------------------
                                    399 	.area XISEG   (XDATA)
                                    400 	.area HOME    (CODE)
                                    401 	.area GSINIT0 (CODE)
                                    402 	.area GSINIT1 (CODE)
                                    403 	.area GSINIT2 (CODE)
                                    404 	.area GSINIT3 (CODE)
                                    405 	.area GSINIT4 (CODE)
                                    406 	.area GSINIT5 (CODE)
                                    407 	.area GSINIT  (CODE)
                                    408 	.area GSFINAL (CODE)
                                    409 	.area CSEG    (CODE)
                                    410 ;--------------------------------------------------------
                                    411 ; interrupt vector
                                    412 ;--------------------------------------------------------
                                    413 	.area HOME    (CODE)
      000000                        414 __interrupt_vect:
      000000 02 00 06         [24]  415 	ljmp	__sdcc_gsinit_startup
                                    416 ;--------------------------------------------------------
                                    417 ; global & static initialisations
                                    418 ;--------------------------------------------------------
                                    419 	.area HOME    (CODE)
                                    420 	.area GSINIT  (CODE)
                                    421 	.area GSFINAL (CODE)
                                    422 	.area GSINIT  (CODE)
                                    423 	.globl __sdcc_gsinit_startup
                                    424 	.globl __sdcc_program_startup
                                    425 	.globl __start__stack
                                    426 	.globl __mcs51_genXINIT
                                    427 	.globl __mcs51_genXRAMCLEAR
                                    428 	.globl __mcs51_genRAMCLEAR
                           000000   429 	C$Pattern.c$3$1_0$6 ==.
                                    430 ;	Pattern.c:3: char Pattern1[] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};
      00005F 75 08 80         [24]  431 	mov	_Pattern1,#0x80
      000062 75 09 40         [24]  432 	mov	(_Pattern1 + 0x0001),#0x40
      000065 75 0A 20         [24]  433 	mov	(_Pattern1 + 0x0002),#0x20
      000068 75 0B 10         [24]  434 	mov	(_Pattern1 + 0x0003),#0x10
      00006B 75 0C 08         [24]  435 	mov	(_Pattern1 + 0x0004),#0x08
      00006E 75 0D 04         [24]  436 	mov	(_Pattern1 + 0x0005),#0x04
      000071 75 0E 02         [24]  437 	mov	(_Pattern1 + 0x0006),#0x02
      000074 75 0F 01         [24]  438 	mov	(_Pattern1 + 0x0007),#0x01
                           000018   439 	C$Pattern.c$4$1_0$6 ==.
                                    440 ;	Pattern.c:4: char Pattern2[] = {0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80};
      000077 75 10 01         [24]  441 	mov	_Pattern2,#0x01
      00007A 75 11 02         [24]  442 	mov	(_Pattern2 + 0x0001),#0x02
      00007D 75 12 04         [24]  443 	mov	(_Pattern2 + 0x0002),#0x04
      000080 75 13 08         [24]  444 	mov	(_Pattern2 + 0x0003),#0x08
      000083 75 14 10         [24]  445 	mov	(_Pattern2 + 0x0004),#0x10
      000086 75 15 20         [24]  446 	mov	(_Pattern2 + 0x0005),#0x20
      000089 75 16 40         [24]  447 	mov	(_Pattern2 + 0x0006),#0x40
      00008C 75 17 80         [24]  448 	mov	(_Pattern2 + 0x0007),#0x80
                           000030   449 	C$Pattern.c$5$1_0$6 ==.
                                    450 ;	Pattern.c:5: char Pattern3[] = {0x81,0x42,0x24,0x18,0x18,0x24,0x42,0x81};
      00008F 75 18 81         [24]  451 	mov	_Pattern3,#0x81
      000092 75 19 42         [24]  452 	mov	(_Pattern3 + 0x0001),#0x42
      000095 75 1A 24         [24]  453 	mov	(_Pattern3 + 0x0002),#0x24
      000098 75 1B 18         [24]  454 	mov	(_Pattern3 + 0x0003),#0x18
      00009B 75 1C 18         [24]  455 	mov	(_Pattern3 + 0x0004),#0x18
      00009E 75 1D 24         [24]  456 	mov	(_Pattern3 + 0x0005),#0x24
      0000A1 75 1E 42         [24]  457 	mov	(_Pattern3 + 0x0006),#0x42
      0000A4 75 1F 81         [24]  458 	mov	(_Pattern3 + 0x0007),#0x81
                           000048   459 	C$Pattern.c$6$1_0$6 ==.
                                    460 ;	Pattern.c:6: char Pattern4[] = {0x18,0x24,0x42,0x81,0x81,0x42,0x24,0x18};
      0000A7 75 20 18         [24]  461 	mov	_Pattern4,#0x18
      0000AA 75 21 24         [24]  462 	mov	(_Pattern4 + 0x0001),#0x24
      0000AD 75 22 42         [24]  463 	mov	(_Pattern4 + 0x0002),#0x42
      0000B0 75 23 81         [24]  464 	mov	(_Pattern4 + 0x0003),#0x81
      0000B3 75 24 81         [24]  465 	mov	(_Pattern4 + 0x0004),#0x81
      0000B6 75 25 42         [24]  466 	mov	(_Pattern4 + 0x0005),#0x42
      0000B9 75 26 24         [24]  467 	mov	(_Pattern4 + 0x0006),#0x24
      0000BC 75 27 18         [24]  468 	mov	(_Pattern4 + 0x0007),#0x18
                           000060   469 	C$Pattern.c$7$1_0$6 ==.
                                    470 ;	Pattern.c:7: char Pattern5[] = {0xA0,0x50,0x28,0x14,0x0A,0x05,0x02,0x01};
      0000BF 75 28 A0         [24]  471 	mov	_Pattern5,#0xa0
      0000C2 75 29 50         [24]  472 	mov	(_Pattern5 + 0x0001),#0x50
      0000C5 75 2A 28         [24]  473 	mov	(_Pattern5 + 0x0002),#0x28
      0000C8 75 2B 14         [24]  474 	mov	(_Pattern5 + 0x0003),#0x14
      0000CB 75 2C 0A         [24]  475 	mov	(_Pattern5 + 0x0004),#0x0a
      0000CE 75 2D 05         [24]  476 	mov	(_Pattern5 + 0x0005),#0x05
      0000D1 75 2E 02         [24]  477 	mov	(_Pattern5 + 0x0006),#0x02
      0000D4 75 2F 01         [24]  478 	mov	(_Pattern5 + 0x0007),#0x01
                           000078   479 	C$Pattern.c$8$1_0$6 ==.
                                    480 ;	Pattern.c:8: char Pattern6[] = {0x01,0x02,0x05,0x0A,0x14,0x28,0x50,0xA0};
      0000D7 75 30 01         [24]  481 	mov	_Pattern6,#0x01
      0000DA 75 31 02         [24]  482 	mov	(_Pattern6 + 0x0001),#0x02
      0000DD 75 32 05         [24]  483 	mov	(_Pattern6 + 0x0002),#0x05
      0000E0 75 33 0A         [24]  484 	mov	(_Pattern6 + 0x0003),#0x0a
      0000E3 75 34 14         [24]  485 	mov	(_Pattern6 + 0x0004),#0x14
      0000E6 75 35 28         [24]  486 	mov	(_Pattern6 + 0x0005),#0x28
      0000E9 75 36 50         [24]  487 	mov	(_Pattern6 + 0x0006),#0x50
      0000EC 75 37 A0         [24]  488 	mov	(_Pattern6 + 0x0007),#0xa0
                                    489 	.area GSFINAL (CODE)
      0000EF 02 00 03         [24]  490 	ljmp	__sdcc_program_startup
                                    491 ;--------------------------------------------------------
                                    492 ; Home
                                    493 ;--------------------------------------------------------
                                    494 	.area HOME    (CODE)
                                    495 	.area HOME    (CODE)
      000003                        496 __sdcc_program_startup:
      000003 02 01 72         [24]  497 	ljmp	_main
                                    498 ;	return from main will return to caller
                                    499 ;--------------------------------------------------------
                                    500 ; code
                                    501 ;--------------------------------------------------------
                                    502 	.area CSEG    (CODE)
                                    503 ;------------------------------------------------------------
                                    504 ;Allocation info for local variables in function 'delay'
                                    505 ;------------------------------------------------------------
                                    506 ;ms                        Allocated to registers r6 r7 
                                    507 ;------------------------------------------------------------
                           000000   508 	G$delay$0$0 ==.
                           000000   509 	C$Pattern.c$19$0_0$2 ==.
                                    510 ;	Pattern.c:19: void delay(int ms )            /* How to get 125mS.. */
                                    511 ;	-----------------------------------------
                                    512 ;	 function delay
                                    513 ;	-----------------------------------------
      0000F2                        514 _delay:
                           000007   515 	ar7 = 0x07
                           000006   516 	ar6 = 0x06
                           000005   517 	ar5 = 0x05
                           000004   518 	ar4 = 0x04
                           000003   519 	ar3 = 0x03
                           000002   520 	ar2 = 0x02
                           000001   521 	ar1 = 0x01
                           000000   522 	ar0 = 0x00
      0000F2 AE 82            [24]  523 	mov	r6,dpl
      0000F4 AF 83            [24]  524 	mov	r7,dph
                           000004   525 	C$Pattern.c$22$1_0$2 ==.
                                    526 ;	Pattern.c:22: while(ms--);            /* So 1000 / 11.89uS = 91 for 1 msec */
      0000F6                        527 00101$:
      0000F6 8E 04            [24]  528 	mov	ar4,r6
      0000F8 8F 05            [24]  529 	mov	ar5,r7
      0000FA 1E               [12]  530 	dec	r6
      0000FB BE FF 01         [24]  531 	cjne	r6,#0xff,00110$
      0000FE 1F               [12]  532 	dec	r7
      0000FF                        533 00110$:
      0000FF EC               [12]  534 	mov	a,r4
      000100 4D               [12]  535 	orl	a,r5
      000101 70 F3            [24]  536 	jnz	00101$
                           000011   537 	C$Pattern.c$23$1_0$2 ==.
                                    538 ;	Pattern.c:23: }          
                           000011   539 	C$Pattern.c$23$1_0$2 ==.
                           000011   540 	XG$delay$0$0 ==.
      000103 22               [24]  541 	ret
                                    542 ;------------------------------------------------------------
                                    543 ;Allocation info for local variables in function 'button'
                                    544 ;------------------------------------------------------------
                           000012   545 	G$button$0$0 ==.
                           000012   546 	C$Pattern.c$24$1_0$4 ==.
                                    547 ;	Pattern.c:24: char button(void)
                                    548 ;	-----------------------------------------
                                    549 ;	 function button
                                    550 ;	-----------------------------------------
      000104                        551 _button:
                           000012   552 	C$Pattern.c$26$1_0$4 ==.
                                    553 ;	Pattern.c:26: if(P0_0) return 0;
      000104 30 80 06         [24]  554 	jnb	_P0_0,00102$
      000107 75 82 00         [24]  555 	mov	dpl,#0x00
      00010A 02 01 71         [24]  556 	ljmp	00117$
      00010D                        557 00102$:
                           00001B   558 	C$Pattern.c$28$1_0$4 ==.
                                    559 ;	Pattern.c:28: if(++mode == 8) mode = 0;
      00010D E5 50            [12]  560 	mov	a,_mode
      00010F 04               [12]  561 	inc	a
      000110 FF               [12]  562 	mov	r7,a
      000111 8F 50            [24]  563 	mov	_mode,r7
      000113 BF 08 03         [24]  564 	cjne	r7,#0x08,00104$
      000116 75 50 00         [24]  565 	mov	_mode,#0x00
      000119                        566 00104$:
                           000027   567 	C$Pattern.c$29$1_0$4 ==.
                                    568 ;	Pattern.c:29: if(mode == 0) patternPtr = &Pattern1[0];
      000119 E5 50            [12]  569 	mov	a,_mode
      00011B 70 08            [24]  570 	jnz	00106$
      00011D 75 40 08         [24]  571 	mov	_patternPtr,#_Pattern1
      000120 F5 41            [12]  572 	mov	(_patternPtr + 1),a
      000122 75 42 40         [24]  573 	mov	(_patternPtr + 2),#0x40
      000125                        574 00106$:
                           000033   575 	C$Pattern.c$30$1_0$4 ==.
                                    576 ;	Pattern.c:30: if(mode == 1) patternPtr = &Pattern2[0];
      000125 74 01            [12]  577 	mov	a,#0x01
      000127 B5 50 09         [24]  578 	cjne	a,_mode,00108$
      00012A 75 40 10         [24]  579 	mov	_patternPtr,#_Pattern2
      00012D 75 41 00         [24]  580 	mov	(_patternPtr + 1),#0x00
      000130 75 42 40         [24]  581 	mov	(_patternPtr + 2),#0x40
      000133                        582 00108$:
                           000041   583 	C$Pattern.c$31$1_0$4 ==.
                                    584 ;	Pattern.c:31: if(mode == 2) patternPtr = &Pattern3[0];
      000133 74 02            [12]  585 	mov	a,#0x02
      000135 B5 50 09         [24]  586 	cjne	a,_mode,00110$
      000138 75 40 18         [24]  587 	mov	_patternPtr,#_Pattern3
      00013B 75 41 00         [24]  588 	mov	(_patternPtr + 1),#0x00
      00013E 75 42 40         [24]  589 	mov	(_patternPtr + 2),#0x40
      000141                        590 00110$:
                           00004F   591 	C$Pattern.c$32$1_0$4 ==.
                                    592 ;	Pattern.c:32: if(mode == 3) patternPtr = &Pattern4[0];
      000141 74 03            [12]  593 	mov	a,#0x03
      000143 B5 50 09         [24]  594 	cjne	a,_mode,00112$
      000146 75 40 20         [24]  595 	mov	_patternPtr,#_Pattern4
      000149 75 41 00         [24]  596 	mov	(_patternPtr + 1),#0x00
      00014C 75 42 40         [24]  597 	mov	(_patternPtr + 2),#0x40
      00014F                        598 00112$:
                           00005D   599 	C$Pattern.c$33$1_0$4 ==.
                                    600 ;	Pattern.c:33: if(mode == 4) patternPtr = &Pattern5[0];
      00014F 74 04            [12]  601 	mov	a,#0x04
      000151 B5 50 09         [24]  602 	cjne	a,_mode,00114$
      000154 75 40 28         [24]  603 	mov	_patternPtr,#_Pattern5
      000157 75 41 00         [24]  604 	mov	(_patternPtr + 1),#0x00
      00015A 75 42 40         [24]  605 	mov	(_patternPtr + 2),#0x40
      00015D                        606 00114$:
                           00006B   607 	C$Pattern.c$34$1_0$4 ==.
                                    608 ;	Pattern.c:34: if(mode == 5) patternPtr = &Pattern6[0];
      00015D 74 05            [12]  609 	mov	a,#0x05
      00015F B5 50 09         [24]  610 	cjne	a,_mode,00116$
      000162 75 40 30         [24]  611 	mov	_patternPtr,#_Pattern6
      000165 75 41 00         [24]  612 	mov	(_patternPtr + 1),#0x00
      000168 75 42 40         [24]  613 	mov	(_patternPtr + 2),#0x40
      00016B                        614 00116$:
                           000079   615 	C$Pattern.c$35$1_0$4 ==.
                                    616 ;	Pattern.c:35: P2 = mode;
      00016B 85 50 A0         [24]  617 	mov	_P2,_mode
                           00007C   618 	C$Pattern.c$36$1_0$4 ==.
                                    619 ;	Pattern.c:36: return 1;
      00016E 75 82 01         [24]  620 	mov	dpl,#0x01
      000171                        621 00117$:
                           00007F   622 	C$Pattern.c$37$1_0$4 ==.
                                    623 ;	Pattern.c:37: }
                           00007F   624 	C$Pattern.c$37$1_0$4 ==.
                           00007F   625 	XG$button$0$0 ==.
      000171 22               [24]  626 	ret
                                    627 ;------------------------------------------------------------
                                    628 ;Allocation info for local variables in function 'main'
                                    629 ;------------------------------------------------------------
                           000080   630 	G$main$0$0 ==.
                           000080   631 	C$Pattern.c$38$1_0$6 ==.
                                    632 ;	Pattern.c:38: void main(void)         /* Main entry point */
                                    633 ;	-----------------------------------------
                                    634 ;	 function main
                                    635 ;	-----------------------------------------
      000172                        636 _main:
                           000080   637 	C$Pattern.c$40$1_0$6 ==.
                                    638 ;	Pattern.c:40: SP = 0x60;
      000172 75 81 60         [24]  639 	mov	_SP,#0x60
                           000083   640 	C$Pattern.c$41$1_0$6 ==.
                                    641 ;	Pattern.c:41: mode = 1;
      000175 75 50 01         [24]  642 	mov	_mode,#0x01
                           000086   643 	C$Pattern.c$42$1_0$6 ==.
                                    644 ;	Pattern.c:42: modePtr = &mode;	/* modePtr now have the address of mode not the data value */
      000178 75 51 50         [24]  645 	mov	_modePtr,#_mode
                           000089   646 	C$Pattern.c$43$1_0$6 ==.
                                    647 ;	Pattern.c:43: patternPtr = &Pattern1[0];	/* patternPtr now have also the secound array Address */ 
      00017B 75 40 08         [24]  648 	mov	_patternPtr,#_Pattern1
      00017E 75 41 00         [24]  649 	mov	(_patternPtr + 1),#0x00
      000181 75 42 40         [24]  650 	mov	(_patternPtr + 2),#0x40
                           000092   651 	C$Pattern.c$44$1_0$6 ==.
                                    652 ;	Pattern.c:44: RamPatternPtr = &RamPattern[0];
      000184 75 53 38         [24]  653 	mov	_RamPatternPtr,#_RamPattern
                           000095   654 	C$Pattern.c$45$1_0$6 ==.
                                    655 ;	Pattern.c:45: while(1)           /* Forever loop */
      000187                        656 00105$:
                           000095   657 	C$Pattern.c$47$3_0$8 ==.
                                    658 ;	Pattern.c:47: for(x=0;x<8;x++)
      000187 75 52 00         [24]  659 	mov	_x,#0x00
      00018A                        660 00108$:
      00018A 74 F8            [12]  661 	mov	a,#0x100 - 0x08
      00018C 25 52            [12]  662 	add	a,_x
      00018E 40 F7            [24]  663 	jc	00105$
                           00009E   664 	C$Pattern.c$49$4_0$9 ==.
                                    665 ;	Pattern.c:49: P1 = patternPtr[x];     
      000190 E5 52            [12]  666 	mov	a,_x
      000192 25 40            [12]  667 	add	a,_patternPtr
      000194 FD               [12]  668 	mov	r5,a
      000195 E4               [12]  669 	clr	a
      000196 35 41            [12]  670 	addc	a,(_patternPtr + 1)
      000198 FE               [12]  671 	mov	r6,a
      000199 AF 42            [24]  672 	mov	r7,(_patternPtr + 2)
      00019B 8D 82            [24]  673 	mov	dpl,r5
      00019D 8E 83            [24]  674 	mov	dph,r6
      00019F 8F F0            [24]  675 	mov	b,r7
      0001A1 12 01 BE         [24]  676 	lcall	__gptrget
      0001A4 F5 90            [12]  677 	mov	_P1,a
                           0000B4   678 	C$Pattern.c$50$4_0$9 ==.
                                    679 ;	Pattern.c:50: delay(1);        		/* To see LED's */
      0001A6 90 00 01         [24]  680 	mov	dptr,#0x0001
      0001A9 12 00 F2         [24]  681 	lcall	_delay
                           0000BA   682 	C$Pattern.c$51$4_0$9 ==.
                                    683 ;	Pattern.c:51: if(button()) x = 0;         /* Check button */
      0001AC 12 01 04         [24]  684 	lcall	_button
      0001AF E5 82            [12]  685 	mov	a,dpl
      0001B1 60 03            [24]  686 	jz	00109$
      0001B3 75 52 00         [24]  687 	mov	_x,#0x00
      0001B6                        688 00109$:
                           0000C4   689 	C$Pattern.c$47$3_0$8 ==.
                                    690 ;	Pattern.c:47: for(x=0;x<8;x++)
      0001B6 E5 52            [12]  691 	mov	a,_x
      0001B8 04               [12]  692 	inc	a
      0001B9 F5 52            [12]  693 	mov	_x,a
      0001BB 80 CD            [24]  694 	sjmp	00108$
                           0000CB   695 	C$Pattern.c$54$1_0$6 ==.
                                    696 ;	Pattern.c:54: }
                           0000CB   697 	C$Pattern.c$54$1_0$6 ==.
                           0000CB   698 	XG$main$0$0 ==.
      0001BD 22               [24]  699 	ret
                                    700 	.area CSEG    (CODE)
                                    701 	.area CONST   (CODE)
                                    702 	.area XINIT   (CODE)
                                    703 	.area CABS    (ABS,CODE)
