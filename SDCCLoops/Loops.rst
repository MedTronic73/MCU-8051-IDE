                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW32)
                                      4 ;--------------------------------------------------------
                                      5 	.module Loops
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _CY
                                     13 	.globl _AC
                                     14 	.globl _F0
                                     15 	.globl _RS1
                                     16 	.globl _RS0
                                     17 	.globl _OV
                                     18 	.globl _FL
                                     19 	.globl _P
                                     20 	.globl _PS
                                     21 	.globl _PT1
                                     22 	.globl _PX1
                                     23 	.globl _PT0
                                     24 	.globl _PX0
                                     25 	.globl _RD
                                     26 	.globl _WR
                                     27 	.globl _T1
                                     28 	.globl _T0
                                     29 	.globl _INT1
                                     30 	.globl _INT0
                                     31 	.globl _TXD
                                     32 	.globl _RXD
                                     33 	.globl _P3_7
                                     34 	.globl _P3_6
                                     35 	.globl _P3_5
                                     36 	.globl _P3_4
                                     37 	.globl _P3_3
                                     38 	.globl _P3_2
                                     39 	.globl _P3_1
                                     40 	.globl _P3_0
                                     41 	.globl _EA
                                     42 	.globl _ES
                                     43 	.globl _ET1
                                     44 	.globl _EX1
                                     45 	.globl _ET0
                                     46 	.globl _EX0
                                     47 	.globl _P2_7
                                     48 	.globl _P2_6
                                     49 	.globl _P2_5
                                     50 	.globl _P2_4
                                     51 	.globl _P2_3
                                     52 	.globl _P2_2
                                     53 	.globl _P2_1
                                     54 	.globl _P2_0
                                     55 	.globl _SM0
                                     56 	.globl _SM1
                                     57 	.globl _SM2
                                     58 	.globl _REN
                                     59 	.globl _TB8
                                     60 	.globl _RB8
                                     61 	.globl _TI
                                     62 	.globl _RI
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _TF1
                                     72 	.globl _TR1
                                     73 	.globl _TF0
                                     74 	.globl _TR0
                                     75 	.globl _IE1
                                     76 	.globl _IT1
                                     77 	.globl _IE0
                                     78 	.globl _IT0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _B
                                     88 	.globl _A
                                     89 	.globl _ACC
                                     90 	.globl _PSW
                                     91 	.globl _IP
                                     92 	.globl _P3
                                     93 	.globl _IE
                                     94 	.globl _P2
                                     95 	.globl _SBUF
                                     96 	.globl _SCON
                                     97 	.globl _P1
                                     98 	.globl _TH1
                                     99 	.globl _TH0
                                    100 	.globl _TL1
                                    101 	.globl _TL0
                                    102 	.globl _TMOD
                                    103 	.globl _TCON
                                    104 	.globl _PCON
                                    105 	.globl _DPH
                                    106 	.globl _DPL
                                    107 	.globl _SP
                                    108 	.globl _P0
                                    109 	.globl _i
                                    110 	.globl _sum
                                    111 	.globl _sum_while
                                    112 	.globl _sum_Do
                                    113 	.globl _sum_For
                                    114 ;--------------------------------------------------------
                                    115 ; special function registers
                                    116 ;--------------------------------------------------------
                                    117 	.area RSEG    (ABS,DATA)
      000000                        118 	.org 0x0000
                           000080   119 G$P0$0_0$0 == 0x0080
                           000080   120 _P0	=	0x0080
                           000081   121 G$SP$0_0$0 == 0x0081
                           000081   122 _SP	=	0x0081
                           000082   123 G$DPL$0_0$0 == 0x0082
                           000082   124 _DPL	=	0x0082
                           000083   125 G$DPH$0_0$0 == 0x0083
                           000083   126 _DPH	=	0x0083
                           000087   127 G$PCON$0_0$0 == 0x0087
                           000087   128 _PCON	=	0x0087
                           000088   129 G$TCON$0_0$0 == 0x0088
                           000088   130 _TCON	=	0x0088
                           000089   131 G$TMOD$0_0$0 == 0x0089
                           000089   132 _TMOD	=	0x0089
                           00008A   133 G$TL0$0_0$0 == 0x008a
                           00008A   134 _TL0	=	0x008a
                           00008B   135 G$TL1$0_0$0 == 0x008b
                           00008B   136 _TL1	=	0x008b
                           00008C   137 G$TH0$0_0$0 == 0x008c
                           00008C   138 _TH0	=	0x008c
                           00008D   139 G$TH1$0_0$0 == 0x008d
                           00008D   140 _TH1	=	0x008d
                           000090   141 G$P1$0_0$0 == 0x0090
                           000090   142 _P1	=	0x0090
                           000098   143 G$SCON$0_0$0 == 0x0098
                           000098   144 _SCON	=	0x0098
                           000099   145 G$SBUF$0_0$0 == 0x0099
                           000099   146 _SBUF	=	0x0099
                           0000A0   147 G$P2$0_0$0 == 0x00a0
                           0000A0   148 _P2	=	0x00a0
                           0000A8   149 G$IE$0_0$0 == 0x00a8
                           0000A8   150 _IE	=	0x00a8
                           0000B0   151 G$P3$0_0$0 == 0x00b0
                           0000B0   152 _P3	=	0x00b0
                           0000B8   153 G$IP$0_0$0 == 0x00b8
                           0000B8   154 _IP	=	0x00b8
                           0000D0   155 G$PSW$0_0$0 == 0x00d0
                           0000D0   156 _PSW	=	0x00d0
                           0000E0   157 G$ACC$0_0$0 == 0x00e0
                           0000E0   158 _ACC	=	0x00e0
                           0000E0   159 G$A$0_0$0 == 0x00e0
                           0000E0   160 _A	=	0x00e0
                           0000F0   161 G$B$0_0$0 == 0x00f0
                           0000F0   162 _B	=	0x00f0
                                    163 ;--------------------------------------------------------
                                    164 ; special function bits
                                    165 ;--------------------------------------------------------
                                    166 	.area RSEG    (ABS,DATA)
      000000                        167 	.org 0x0000
                           000080   168 G$P0_0$0_0$0 == 0x0080
                           000080   169 _P0_0	=	0x0080
                           000081   170 G$P0_1$0_0$0 == 0x0081
                           000081   171 _P0_1	=	0x0081
                           000082   172 G$P0_2$0_0$0 == 0x0082
                           000082   173 _P0_2	=	0x0082
                           000083   174 G$P0_3$0_0$0 == 0x0083
                           000083   175 _P0_3	=	0x0083
                           000084   176 G$P0_4$0_0$0 == 0x0084
                           000084   177 _P0_4	=	0x0084
                           000085   178 G$P0_5$0_0$0 == 0x0085
                           000085   179 _P0_5	=	0x0085
                           000086   180 G$P0_6$0_0$0 == 0x0086
                           000086   181 _P0_6	=	0x0086
                           000087   182 G$P0_7$0_0$0 == 0x0087
                           000087   183 _P0_7	=	0x0087
                           000088   184 G$IT0$0_0$0 == 0x0088
                           000088   185 _IT0	=	0x0088
                           000089   186 G$IE0$0_0$0 == 0x0089
                           000089   187 _IE0	=	0x0089
                           00008A   188 G$IT1$0_0$0 == 0x008a
                           00008A   189 _IT1	=	0x008a
                           00008B   190 G$IE1$0_0$0 == 0x008b
                           00008B   191 _IE1	=	0x008b
                           00008C   192 G$TR0$0_0$0 == 0x008c
                           00008C   193 _TR0	=	0x008c
                           00008D   194 G$TF0$0_0$0 == 0x008d
                           00008D   195 _TF0	=	0x008d
                           00008E   196 G$TR1$0_0$0 == 0x008e
                           00008E   197 _TR1	=	0x008e
                           00008F   198 G$TF1$0_0$0 == 0x008f
                           00008F   199 _TF1	=	0x008f
                           000090   200 G$P1_0$0_0$0 == 0x0090
                           000090   201 _P1_0	=	0x0090
                           000091   202 G$P1_1$0_0$0 == 0x0091
                           000091   203 _P1_1	=	0x0091
                           000092   204 G$P1_2$0_0$0 == 0x0092
                           000092   205 _P1_2	=	0x0092
                           000093   206 G$P1_3$0_0$0 == 0x0093
                           000093   207 _P1_3	=	0x0093
                           000094   208 G$P1_4$0_0$0 == 0x0094
                           000094   209 _P1_4	=	0x0094
                           000095   210 G$P1_5$0_0$0 == 0x0095
                           000095   211 _P1_5	=	0x0095
                           000096   212 G$P1_6$0_0$0 == 0x0096
                           000096   213 _P1_6	=	0x0096
                           000097   214 G$P1_7$0_0$0 == 0x0097
                           000097   215 _P1_7	=	0x0097
                           000098   216 G$RI$0_0$0 == 0x0098
                           000098   217 _RI	=	0x0098
                           000099   218 G$TI$0_0$0 == 0x0099
                           000099   219 _TI	=	0x0099
                           00009A   220 G$RB8$0_0$0 == 0x009a
                           00009A   221 _RB8	=	0x009a
                           00009B   222 G$TB8$0_0$0 == 0x009b
                           00009B   223 _TB8	=	0x009b
                           00009C   224 G$REN$0_0$0 == 0x009c
                           00009C   225 _REN	=	0x009c
                           00009D   226 G$SM2$0_0$0 == 0x009d
                           00009D   227 _SM2	=	0x009d
                           00009E   228 G$SM1$0_0$0 == 0x009e
                           00009E   229 _SM1	=	0x009e
                           00009F   230 G$SM0$0_0$0 == 0x009f
                           00009F   231 _SM0	=	0x009f
                           0000A0   232 G$P2_0$0_0$0 == 0x00a0
                           0000A0   233 _P2_0	=	0x00a0
                           0000A1   234 G$P2_1$0_0$0 == 0x00a1
                           0000A1   235 _P2_1	=	0x00a1
                           0000A2   236 G$P2_2$0_0$0 == 0x00a2
                           0000A2   237 _P2_2	=	0x00a2
                           0000A3   238 G$P2_3$0_0$0 == 0x00a3
                           0000A3   239 _P2_3	=	0x00a3
                           0000A4   240 G$P2_4$0_0$0 == 0x00a4
                           0000A4   241 _P2_4	=	0x00a4
                           0000A5   242 G$P2_5$0_0$0 == 0x00a5
                           0000A5   243 _P2_5	=	0x00a5
                           0000A6   244 G$P2_6$0_0$0 == 0x00a6
                           0000A6   245 _P2_6	=	0x00a6
                           0000A7   246 G$P2_7$0_0$0 == 0x00a7
                           0000A7   247 _P2_7	=	0x00a7
                           0000A8   248 G$EX0$0_0$0 == 0x00a8
                           0000A8   249 _EX0	=	0x00a8
                           0000A9   250 G$ET0$0_0$0 == 0x00a9
                           0000A9   251 _ET0	=	0x00a9
                           0000AA   252 G$EX1$0_0$0 == 0x00aa
                           0000AA   253 _EX1	=	0x00aa
                           0000AB   254 G$ET1$0_0$0 == 0x00ab
                           0000AB   255 _ET1	=	0x00ab
                           0000AC   256 G$ES$0_0$0 == 0x00ac
                           0000AC   257 _ES	=	0x00ac
                           0000AF   258 G$EA$0_0$0 == 0x00af
                           0000AF   259 _EA	=	0x00af
                           0000B0   260 G$P3_0$0_0$0 == 0x00b0
                           0000B0   261 _P3_0	=	0x00b0
                           0000B1   262 G$P3_1$0_0$0 == 0x00b1
                           0000B1   263 _P3_1	=	0x00b1
                           0000B2   264 G$P3_2$0_0$0 == 0x00b2
                           0000B2   265 _P3_2	=	0x00b2
                           0000B3   266 G$P3_3$0_0$0 == 0x00b3
                           0000B3   267 _P3_3	=	0x00b3
                           0000B4   268 G$P3_4$0_0$0 == 0x00b4
                           0000B4   269 _P3_4	=	0x00b4
                           0000B5   270 G$P3_5$0_0$0 == 0x00b5
                           0000B5   271 _P3_5	=	0x00b5
                           0000B6   272 G$P3_6$0_0$0 == 0x00b6
                           0000B6   273 _P3_6	=	0x00b6
                           0000B7   274 G$P3_7$0_0$0 == 0x00b7
                           0000B7   275 _P3_7	=	0x00b7
                           0000B0   276 G$RXD$0_0$0 == 0x00b0
                           0000B0   277 _RXD	=	0x00b0
                           0000B1   278 G$TXD$0_0$0 == 0x00b1
                           0000B1   279 _TXD	=	0x00b1
                           0000B2   280 G$INT0$0_0$0 == 0x00b2
                           0000B2   281 _INT0	=	0x00b2
                           0000B3   282 G$INT1$0_0$0 == 0x00b3
                           0000B3   283 _INT1	=	0x00b3
                           0000B4   284 G$T0$0_0$0 == 0x00b4
                           0000B4   285 _T0	=	0x00b4
                           0000B5   286 G$T1$0_0$0 == 0x00b5
                           0000B5   287 _T1	=	0x00b5
                           0000B6   288 G$WR$0_0$0 == 0x00b6
                           0000B6   289 _WR	=	0x00b6
                           0000B7   290 G$RD$0_0$0 == 0x00b7
                           0000B7   291 _RD	=	0x00b7
                           0000B8   292 G$PX0$0_0$0 == 0x00b8
                           0000B8   293 _PX0	=	0x00b8
                           0000B9   294 G$PT0$0_0$0 == 0x00b9
                           0000B9   295 _PT0	=	0x00b9
                           0000BA   296 G$PX1$0_0$0 == 0x00ba
                           0000BA   297 _PX1	=	0x00ba
                           0000BB   298 G$PT1$0_0$0 == 0x00bb
                           0000BB   299 _PT1	=	0x00bb
                           0000BC   300 G$PS$0_0$0 == 0x00bc
                           0000BC   301 _PS	=	0x00bc
                           0000D0   302 G$P$0_0$0 == 0x00d0
                           0000D0   303 _P	=	0x00d0
                           0000D1   304 G$FL$0_0$0 == 0x00d1
                           0000D1   305 _FL	=	0x00d1
                           0000D2   306 G$OV$0_0$0 == 0x00d2
                           0000D2   307 _OV	=	0x00d2
                           0000D3   308 G$RS0$0_0$0 == 0x00d3
                           0000D3   309 _RS0	=	0x00d3
                           0000D4   310 G$RS1$0_0$0 == 0x00d4
                           0000D4   311 _RS1	=	0x00d4
                           0000D5   312 G$F0$0_0$0 == 0x00d5
                           0000D5   313 _F0	=	0x00d5
                           0000D6   314 G$AC$0_0$0 == 0x00d6
                           0000D6   315 _AC	=	0x00d6
                           0000D7   316 G$CY$0_0$0 == 0x00d7
                           0000D7   317 _CY	=	0x00d7
                                    318 ;--------------------------------------------------------
                                    319 ; overlayable register banks
                                    320 ;--------------------------------------------------------
                                    321 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        322 	.ds 8
                                    323 ;--------------------------------------------------------
                                    324 ; internal ram data
                                    325 ;--------------------------------------------------------
                                    326 	.area DSEG    (DATA)
                           000000   327 G$sum$0_0$0==.
      000008                        328 _sum::
      000008                        329 	.ds 2
                           000002   330 G$i$0_0$0==.
      00000A                        331 _i::
      00000A                        332 	.ds 1
                                    333 ;--------------------------------------------------------
                                    334 ; overlayable items in internal ram
                                    335 ;--------------------------------------------------------
                                    336 ;--------------------------------------------------------
                                    337 ; Stack segment in internal ram
                                    338 ;--------------------------------------------------------
                                    339 	.area	SSEG
      00000B                        340 __start__stack:
      00000B                        341 	.ds	1
                                    342 
                                    343 ;--------------------------------------------------------
                                    344 ; indirectly addressable internal ram data
                                    345 ;--------------------------------------------------------
                                    346 	.area ISEG    (DATA)
                                    347 ;--------------------------------------------------------
                                    348 ; absolute internal ram data
                                    349 ;--------------------------------------------------------
                                    350 	.area IABS    (ABS,DATA)
                                    351 	.area IABS    (ABS,DATA)
                                    352 ;--------------------------------------------------------
                                    353 ; bit data
                                    354 ;--------------------------------------------------------
                                    355 	.area BSEG    (BIT)
                                    356 ;--------------------------------------------------------
                                    357 ; paged external ram data
                                    358 ;--------------------------------------------------------
                                    359 	.area PSEG    (PAG,XDATA)
                                    360 ;--------------------------------------------------------
                                    361 ; external ram data
                                    362 ;--------------------------------------------------------
                                    363 	.area XSEG    (XDATA)
                                    364 ;--------------------------------------------------------
                                    365 ; absolute external ram data
                                    366 ;--------------------------------------------------------
                                    367 	.area XABS    (ABS,XDATA)
                                    368 ;--------------------------------------------------------
                                    369 ; external initialized ram data
                                    370 ;--------------------------------------------------------
                                    371 	.area XISEG   (XDATA)
                                    372 	.area HOME    (CODE)
                                    373 	.area GSINIT0 (CODE)
                                    374 	.area GSINIT1 (CODE)
                                    375 	.area GSINIT2 (CODE)
                                    376 	.area GSINIT3 (CODE)
                                    377 	.area GSINIT4 (CODE)
                                    378 	.area GSINIT5 (CODE)
                                    379 	.area GSINIT  (CODE)
                                    380 	.area GSFINAL (CODE)
                                    381 	.area CSEG    (CODE)
                                    382 ;--------------------------------------------------------
                                    383 ; interrupt vector
                                    384 ;--------------------------------------------------------
                                    385 	.area HOME    (CODE)
      000000                        386 __interrupt_vect:
      000000 02 00 06         [24]  387 	ljmp	__sdcc_gsinit_startup
                                    388 ;--------------------------------------------------------
                                    389 ; global & static initialisations
                                    390 ;--------------------------------------------------------
                                    391 	.area HOME    (CODE)
                                    392 	.area GSINIT  (CODE)
                                    393 	.area GSFINAL (CODE)
                                    394 	.area GSINIT  (CODE)
                                    395 	.globl __sdcc_gsinit_startup
                                    396 	.globl __sdcc_program_startup
                                    397 	.globl __start__stack
                                    398 	.globl __mcs51_genXINIT
                                    399 	.globl __mcs51_genXRAMCLEAR
                                    400 	.globl __mcs51_genRAMCLEAR
                                    401 	.area GSFINAL (CODE)
      00005F 02 00 03         [24]  402 	ljmp	__sdcc_program_startup
                                    403 ;--------------------------------------------------------
                                    404 ; Home
                                    405 ;--------------------------------------------------------
                                    406 	.area HOME    (CODE)
                                    407 	.area HOME    (CODE)
      000003                        408 __sdcc_program_startup:
      000003 02 00 62         [24]  409 	ljmp	_main
                                    410 ;	return from main will return to caller
                                    411 ;--------------------------------------------------------
                                    412 ; code
                                    413 ;--------------------------------------------------------
                                    414 	.area CSEG    (CODE)
                                    415 ;------------------------------------------------------------
                                    416 ;Allocation info for local variables in function 'main'
                                    417 ;------------------------------------------------------------
                           000000   418 	G$main$0$0 ==.
                           000000   419 	C$Loops.c$19$0_0$5 ==.
                                    420 ;	Loops.c:19: void main (void)			/* Main Function Body */
                                    421 ;	-----------------------------------------
                                    422 ;	 function main
                                    423 ;	-----------------------------------------
      000062                        424 _main:
                           000007   425 	ar7 = 0x07
                           000006   426 	ar6 = 0x06
                           000005   427 	ar5 = 0x05
                           000004   428 	ar4 = 0x04
                           000003   429 	ar3 = 0x03
                           000002   430 	ar2 = 0x02
                           000001   431 	ar1 = 0x01
                           000000   432 	ar0 = 0x00
                           000000   433 	C$Loops.c$21$1_0$5 ==.
                                    434 ;	Loops.c:21: sum_while();			/* First Function Call */
      000062 12 00 75         [24]  435 	lcall	_sum_while
                           000003   436 	C$Loops.c$22$1_0$5 ==.
                                    437 ;	Loops.c:22: P1 = sum;			/* Show The Result     */
      000065 85 08 90         [24]  438 	mov	_P1,_sum
                           000006   439 	C$Loops.c$23$1_0$5 ==.
                                    440 ;	Loops.c:23: sum_Do();			/* First Function Call */
      000068 12 00 93         [24]  441 	lcall	_sum_Do
                           000009   442 	C$Loops.c$24$1_0$5 ==.
                                    443 ;	Loops.c:24: P2 = sum;			/* Show The Result     */
      00006B 85 08 A0         [24]  444 	mov	_P2,_sum
                           00000C   445 	C$Loops.c$25$1_0$5 ==.
                                    446 ;	Loops.c:25: sum_For();			/* First Function Call */
      00006E 12 00 AF         [24]  447 	lcall	_sum_For
                           00000F   448 	C$Loops.c$26$1_0$5 ==.
                                    449 ;	Loops.c:26: P3 = sum;			/* Show The Result     */
      000071 85 08 B0         [24]  450 	mov	_P3,_sum
                           000012   451 	C$Loops.c$27$1_0$5 ==.
                                    452 ;	Loops.c:27: }
                           000012   453 	C$Loops.c$27$1_0$5 ==.
                           000012   454 	XG$main$0$0 ==.
      000074 22               [24]  455 	ret
                                    456 ;------------------------------------------------------------
                                    457 ;Allocation info for local variables in function 'sum_while'
                                    458 ;------------------------------------------------------------
                           000013   459 	G$sum_while$0$0 ==.
                           000013   460 	C$Loops.c$29$1_0$7 ==.
                                    461 ;	Loops.c:29: void sum_while(void)  			/* First Function Body */
                                    462 ;	-----------------------------------------
                                    463 ;	 function sum_while
                                    464 ;	-----------------------------------------
      000075                        465 _sum_while:
                           000013   466 	C$Loops.c$31$1_0$7 ==.
                                    467 ;	Loops.c:31: sum = 0;			/* Reset sum to 0 at start */
      000075 E4               [12]  468 	clr	a
      000076 F5 08            [12]  469 	mov	_sum,a
      000078 F5 09            [12]  470 	mov	(_sum + 1),a
                           000018   471 	C$Loops.c$32$1_0$7 ==.
                                    472 ;	Loops.c:32: while(i < 10)			/* As i < 10 Loop */
      00007A                        473 00101$:
      00007A 74 F6            [12]  474 	mov	a,#0x100 - 0x0a
      00007C 25 0A            [12]  475 	add	a,_i
      00007E 40 12            [24]  476 	jc	00104$
                           00001E   477 	C$Loops.c$34$2_0$8 ==.
                                    478 ;	Loops.c:34: sum += i;		/* Accumlate sum */
      000080 AE 0A            [24]  479 	mov	r6,_i
      000082 7F 00            [12]  480 	mov	r7,#0x00
      000084 EE               [12]  481 	mov	a,r6
      000085 25 08            [12]  482 	add	a,_sum
      000087 F5 08            [12]  483 	mov	_sum,a
      000089 EF               [12]  484 	mov	a,r7
      00008A 35 09            [12]  485 	addc	a,(_sum + 1)
      00008C F5 09            [12]  486 	mov	(_sum + 1),a
                           00002C   487 	C$Loops.c$35$2_0$8 ==.
                                    488 ;	Loops.c:35: i++ ;		/* Increment i by 1 */
      00008E 05 0A            [12]  489 	inc	_i
      000090 80 E8            [24]  490 	sjmp	00101$
      000092                        491 00104$:
                           000030   492 	C$Loops.c$37$1_0$7 ==.
                                    493 ;	Loops.c:37: }
                           000030   494 	C$Loops.c$37$1_0$7 ==.
                           000030   495 	XG$sum_while$0$0 ==.
      000092 22               [24]  496 	ret
                                    497 ;------------------------------------------------------------
                                    498 ;Allocation info for local variables in function 'sum_Do'
                                    499 ;------------------------------------------------------------
                           000031   500 	G$sum_Do$0$0 ==.
                           000031   501 	C$Loops.c$39$1_0$10 ==.
                                    502 ;	Loops.c:39: void sum_Do(void)			/* Second Function Body */
                                    503 ;	-----------------------------------------
                                    504 ;	 function sum_Do
                                    505 ;	-----------------------------------------
      000093                        506 _sum_Do:
                           000031   507 	C$Loops.c$41$1_0$10 ==.
                                    508 ;	Loops.c:41: sum = 0;			/* Reset sum to 0 at start */
      000093 E4               [12]  509 	clr	a
      000094 F5 08            [12]  510 	mov	_sum,a
      000096 F5 09            [12]  511 	mov	(_sum + 1),a
                           000036   512 	C$Loops.c$42$1_0$10 ==.
                                    513 ;	Loops.c:42: do				/* with do loop one time at least run even the */
      000098                        514 00101$:
                           000036   515 	C$Loops.c$44$2_0$11 ==.
                                    516 ;	Loops.c:44: sum += i;		/* Accumlate sum */
      000098 AE 0A            [24]  517 	mov	r6,_i
      00009A 7F 00            [12]  518 	mov	r7,#0x00
      00009C EE               [12]  519 	mov	a,r6
      00009D 25 08            [12]  520 	add	a,_sum
      00009F F5 08            [12]  521 	mov	_sum,a
      0000A1 EF               [12]  522 	mov	a,r7
      0000A2 35 09            [12]  523 	addc	a,(_sum + 1)
      0000A4 F5 09            [12]  524 	mov	(_sum + 1),a
                           000044   525 	C$Loops.c$45$2_0$11 ==.
                                    526 ;	Loops.c:45: i++ ;			/* Increment i by 1 */
      0000A6 05 0A            [12]  527 	inc	_i
                           000046   528 	C$Loops.c$46$1_0$10 ==.
                                    529 ;	Loops.c:46: }while (i < 10);	/* As i < 10 Loop else exit */
      0000A8 74 F6            [12]  530 	mov	a,#0x100 - 0x0a
      0000AA 25 0A            [12]  531 	add	a,_i
      0000AC 50 EA            [24]  532 	jnc	00101$
                           00004C   533 	C$Loops.c$47$1_0$10 ==.
                                    534 ;	Loops.c:47: }
                           00004C   535 	C$Loops.c$47$1_0$10 ==.
                           00004C   536 	XG$sum_Do$0$0 ==.
      0000AE 22               [24]  537 	ret
                                    538 ;------------------------------------------------------------
                                    539 ;Allocation info for local variables in function 'sum_For'
                                    540 ;------------------------------------------------------------
                           00004D   541 	G$sum_For$0$0 ==.
                           00004D   542 	C$Loops.c$49$1_0$13 ==.
                                    543 ;	Loops.c:49: void sum_For(void)			/* Second Function Body */
                                    544 ;	-----------------------------------------
                                    545 ;	 function sum_For
                                    546 ;	-----------------------------------------
      0000AF                        547 _sum_For:
                           00004D   548 	C$Loops.c$51$1_0$13 ==.
                                    549 ;	Loops.c:51: sum = 0;			/* Reset sum to 0 at start */
      0000AF E4               [12]  550 	clr	a
      0000B0 F5 08            [12]  551 	mov	_sum,a
      0000B2 F5 09            [12]  552 	mov	(_sum + 1),a
                           000052   553 	C$Loops.c$52$2_0$14 ==.
                                    554 ;	Loops.c:52: for (i = 0; i < 10 ; i++)	/* For Loop statment */
                                    555 ;	1-genFromRTrack replaced	mov	_i,#0x00
      0000B4 F5 0A            [12]  556 	mov	_i,a
      0000B6                        557 00102$:
                           000054   558 	C$Loops.c$54$3_0$15 ==.
                                    559 ;	Loops.c:54: sum += i;		/* Accumlate sum here no need for increment*/
      0000B6 AE 0A            [24]  560 	mov	r6,_i
      0000B8 7F 00            [12]  561 	mov	r7,#0x00
      0000BA EE               [12]  562 	mov	a,r6
      0000BB 25 08            [12]  563 	add	a,_sum
      0000BD F5 08            [12]  564 	mov	_sum,a
      0000BF EF               [12]  565 	mov	a,r7
      0000C0 35 09            [12]  566 	addc	a,(_sum + 1)
      0000C2 F5 09            [12]  567 	mov	(_sum + 1),a
                           000062   568 	C$Loops.c$52$2_0$14 ==.
                                    569 ;	Loops.c:52: for (i = 0; i < 10 ; i++)	/* For Loop statment */
      0000C4 05 0A            [12]  570 	inc	_i
      0000C6 74 F6            [12]  571 	mov	a,#0x100 - 0x0a
      0000C8 25 0A            [12]  572 	add	a,_i
      0000CA 50 EA            [24]  573 	jnc	00102$
                           00006A   574 	C$Loops.c$56$2_0$13 ==.
                                    575 ;	Loops.c:56: }
                           00006A   576 	C$Loops.c$56$2_0$13 ==.
                           00006A   577 	XG$sum_For$0$0 ==.
      0000CC 22               [24]  578 	ret
                                    579 	.area CSEG    (CODE)
                                    580 	.area CONST   (CODE)
                                    581 	.area XINIT   (CODE)
                                    582 	.area CABS    (ABS,CODE)
